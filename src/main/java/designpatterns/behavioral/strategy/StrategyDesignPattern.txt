The Strategy pattern is useful when there is a set of related algorithms and a client object
needs to be able to dynamically pick and choose an algorithm from this set that suits its
current need. The Strategy pattern suggests keeping the implementation of each of the
algorithms in a separate class. Each such algorithm encapsulated in a separate class is
referred to as a strategy. An object that uses a Strategy object is often referred to as a
context object.
In other words, Strategy pattern is used when we have multiple algorithms for a specific
task and client decides the actual implementation to be used at runtime. Strategy pattern is
also known as Policy Pattern. We define multiple algorithms and let client application
pass the algorithm to be used as a parameter. One of the best example of this pattern
is Collections.sort () method that takes Comparator parameter. Based on the different
implementations of Comparator interfaces, the Objects are getting sorted in different
ways.
The strategy pattern is one way that composition can be used as an alternative to sub-
classing. Rather than providing different behaviors via subclasses overriding methods in
super classes, the strategy pattern allows different behaviors to be placed in Concrete
Strategy classes which share the common Strategy interface. A Context object contains a
reference to a Strategy. By changing the Contextâ€™s Strategy, different behaviors can be
obtained.
